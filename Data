spawnPokemon = async (): Promise<void> => {
    cron.schedule("*/2 * * * *", async () => {
      const Data = await await this.client.getFeatures("pokemon");
      if (Data.id === "000") return void null;
      const p = Math.floor(Math.random() * Data.jids.length);
      const q = await this.client.getGroupData(Data.jids[p]);
      if (!q.wild || q.bot !== this.client.user.name) return void null;
      const i = Math.floor(Math.random() * 898);
      const y = Math.floor(Math.random() * 100);
      const { data } = await axios.get(
        `https://pokeapi.co/api/v2/pokemon/${i}`
      );
      const buffer = await this.client.getBuffer(
        `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${data.id}.png`
      );
      await this.client.DB.group.updateMany(
        { jid: Data.jids[p] },
        {
          $set: {
            catchable: true,
            lastPokemon: data.name,
            pId: data.id,
            pLevel: y,
            pImage: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${data.id}.png`,
          },
        }
      );
      await this.client.sendMessage(Data.jids[p], buffer, MessageType.image, {
        caption: `A Wild Pokemon Appeared! [Use ${this.client.config.prefix}catch <pokemon_name> to catch it!]`,
      });
      setTimeout(async () => {
        await this.client.DB.group.updateOne(
          { jid: Data.jids[p] },
          { $set: { catchable: false } }
        );
      }, 500000);
    });
  };
