const buffer = await this.client.utils.getBuffer(image)
        return void (await this.client.sendMessage(jid, {
            image: buffer,
            caption: `A wild Pokemon appeared!`
        }))
    }

    public handleMessage = async (M: Message): Promise<void> => {
        const { prefix } = this.client.config
        const args = M.content.split(' ')
        const title = M.chat === 'dm' ? 'DM' : M.groupMetadata?.subject || 'Group'
        await this.moderate(M)
        if (!args[0] || !args[0].startsWith(prefix))
            return void this.client.log(
                `${chalk.cyanBright('Message')} from ${chalk.yellowBright(M.sender.username)} in ${chalk.blueBright(
                    title
                )}`
            )
        this.client.log(
            `${chalk.cyanBright(`Command ${args[0]}[${args.length - 1}]`)} from ${chalk.yellowBright(
                M.sender.username
            )} in ${chalk.blueBright(title)}`
        )
        const { bot } = await this.client.DB.getGroup(M.from)
        const commands = ['switch', 'hello', 'hi']
        const { banned, tag } = await this.client.DB.getUser(M.sender.jid)
        if (!tag)
            await this.client.DB.updateUser(M.sender.jid, 'tag', 'set', this.client.utils.generateRandomUniqueTag())
        const cmd = args[0].toLowerCase().slice(prefix.length)
        if (bot != this.client.config.name.split(' ')[0] && bot !== 'all' && !commands.includes(cmd)) return void null
        if (banned) return void M.reply(`You are banned from using commands`)
        const command = this.commands.get(cmd) || this.aliases.get(cmd)
        if (!command) return void M.reply('No such command, Baka!')
        const disabledCommands = await this.client.DB.getDisabledCommands()
        const index = disabledCommands.findIndex((CMD) => CMD.command === command.name)
        if (index >= 0)
            return void M.reply(
                `*${this.client.utils.capitalize(cmd)}* is disabled by *${disabledCommands[index].disabledBy}* in *${
                    disabledCommands[index].time
                } (GMT)*. Reason: *${disabledCommands[index].reason}*`
            )
        if (M.chat === 'dm' && !command.config.dm) return void M.reply('You can use this command only in groups')
        if (command.config.category === 'moderation' && !M.sender.isAdmin)
            return void M.reply('This command can only be used by the group admins')
        if (command.config.category === 'nsfw' && !(await this.client.DB.getGroup(M.from)).nsfw)
            return void M.reply('This comand can only be used in NSFW enabled groups')
        if (command.config.category === 'dev' && !M.sender.isMod)
            return void M.reply('This command can only be used by the MODS')
        if (command.config.casino && M.from !== this.client.config.casinoGroup)
            return void M.reply(`This command can only be used in the casino group`)
        const isAdmin = M.groupMetadata?.admins?.includes(this.client.correctJid(this.client.user?.id || ''))
        if (command.config.adminRequired && !isAdmin) return void M.reply('make me admin')
        const cooldownAmount = (command.config.cooldown ?? 3) * 1000
        const time = cooldownAmount + Date.now()
        if (this.cooldowns.has(`${M.sender.jid}${command.name}`)) {
            const cd = this.cooldowns.get(`${M.sender.jid}${command.name}`)
            const remainingTime = this.client.utils.convertMs((cd as number) - Date.now())
            return void M.reply(
                `You are on a cooldown of this command. Wait *${remainingTime}* ${
                    remainingTime > 1 ? 'seconds' : 'second'
